// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	order "github.com/pangolin-do-golang/tech-challenge-order-api/internal/core/order"
	mock "github.com/stretchr/testify/mock"
)

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *IOrderRepository) Create(_a0 *order.Order) (*order.Order, error) {
	ret := _m.Called(_a0)

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*order.Order) (*order.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*order.Order) *order.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*order.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *IOrderRepository) Get(id uuid.UUID) (*order.Order, error) {
	ret := _m.Called(id)

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*order.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *order.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *IOrderRepository) GetAll() ([]order.Order, error) {
	ret := _m.Called()

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]order.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []order.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *IOrderRepository) Update(_a0 *order.Order) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*order.Order) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderRepository creates a new instance of IOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderRepository(t mockConstructorTestingTNewIOrderRepository) *IOrderRepository {
	mock := &IOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
