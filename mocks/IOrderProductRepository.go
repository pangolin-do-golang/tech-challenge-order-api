// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	uuid "github.com/google/uuid"
	order "github.com/pangolin-do-golang/tech-challenge-order-api/internal/core/order"
	mock "github.com/stretchr/testify/mock"
)

// IOrderProductRepository is an autogenerated mock type for the IOrderProductRepository type
type IOrderProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, orderID, product
func (_m *IOrderProductRepository) Create(ctx context.Context, orderID uuid.UUID, product *order.Product) error {
	ret := _m.Called(ctx, orderID, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *order.Product) error); ok {
		r0 = rf(ctx, orderID, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByOrderID provides a mock function with given fields: ctx, orderID
func (_m *IOrderProductRepository) GetByOrderID(ctx context.Context, orderID uuid.UUID) ([]*order.Product, error) {
	ret := _m.Called(ctx, orderID)

	var r0 []*order.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*order.Product, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*order.Product); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIOrderProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderProductRepository creates a new instance of IOrderProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderProductRepository(t mockConstructorTestingTNewIOrderProductRepository) *IOrderProductRepository {
	mock := &IOrderProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
