// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	cart "github.com/pangolin-do-golang/tech-challenge-order-api/internal/core/cart"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ICartService is an autogenerated mock type for the ICartService type
type ICartService struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields: clientID
func (_m *ICartService) Cleanup(clientID uuid.UUID) error {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFullCart provides a mock function with given fields: clientID
func (_m *ICartService) GetFullCart(clientID uuid.UUID) (*cart.Cart, error) {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetFullCart")
	}

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*cart.Cart, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *cart.Cart); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: id
func (_m *ICartService) GetProductByID(id uuid.UUID) (*cart.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *cart.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*cart.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *cart.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICartService creates a new instance of ICartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICartService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICartService {
	mock := &ICartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
